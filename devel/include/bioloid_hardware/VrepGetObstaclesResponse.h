// Generated by gencpp from file bioloid_hardware/VrepGetObstaclesResponse.msg
// DO NOT EDIT!


#ifndef BIOLOID_HARDWARE_MESSAGE_VREPGETOBSTACLESRESPONSE_H
#define BIOLOID_HARDWARE_MESSAGE_VREPGETOBSTACLESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vision_msgs/BoundingBox3D.h>

namespace bioloid_hardware
{
template <class ContainerAllocator>
struct VrepGetObstaclesResponse_
{
  typedef VrepGetObstaclesResponse_<ContainerAllocator> Type;

  VrepGetObstaclesResponse_()
    : names()
    , obstacles()  {
    }
  VrepGetObstaclesResponse_(const ContainerAllocator& _alloc)
    : names(_alloc)
    , obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _names_type;
  _names_type names;

   typedef std::vector< ::vision_msgs::BoundingBox3D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::vision_msgs::BoundingBox3D_<ContainerAllocator> >::other >  _obstacles_type;
  _obstacles_type obstacles;





  typedef boost::shared_ptr< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct VrepGetObstaclesResponse_

typedef ::bioloid_hardware::VrepGetObstaclesResponse_<std::allocator<void> > VrepGetObstaclesResponse;

typedef boost::shared_ptr< ::bioloid_hardware::VrepGetObstaclesResponse > VrepGetObstaclesResponsePtr;
typedef boost::shared_ptr< ::bioloid_hardware::VrepGetObstaclesResponse const> VrepGetObstaclesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bioloid_hardware

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'bioloid_hardware': ['/home/francisco/robotis_ws/src/ros-bioloid-gp/src/bioloid_hardware/msg'], 'vision_msgs': ['/opt/ros/melodic/share/vision_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/melodic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c29d5f3e677d402eaff3f7d766ec42f8";
  }

  static const char* value(const ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc29d5f3e677d402eULL;
  static const uint64_t static_value2 = 0xaff3f7d766ec42f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bioloid_hardware/VrepGetObstaclesResponse";
  }

  static const char* value(const ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] names\n"
"vision_msgs/BoundingBox3D[] obstacles\n"
"\n"
"================================================================================\n"
"MSG: vision_msgs/BoundingBox3D\n"
"# A 3D bounding box that can be positioned and rotated about its center (6 DOF)\n"
"# Dimensions of this box are in meters, and as such, it may be migrated to\n"
"#   another package, such as geometry_msgs, in the future.\n"
"\n"
"# The 3D position and orientation of the bounding box center\n"
"geometry_msgs/Pose center\n"
"\n"
"# The size of the bounding box, in meters, surrounding the object's center\n"
"#   pose.\n"
"geometry_msgs/Vector3 size\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.names);
      stream.next(m.obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VrepGetObstaclesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bioloid_hardware::VrepGetObstaclesResponse_<ContainerAllocator>& v)
  {
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.names[i]);
    }
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::vision_msgs::BoundingBox3D_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIOLOID_HARDWARE_MESSAGE_VREPGETOBSTACLESRESPONSE_H
