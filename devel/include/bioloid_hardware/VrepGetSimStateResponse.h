// Generated by gencpp from file bioloid_hardware/VrepGetSimStateResponse.msg
// DO NOT EDIT!


#ifndef BIOLOID_HARDWARE_MESSAGE_VREPGETSIMSTATERESPONSE_H
#define BIOLOID_HARDWARE_MESSAGE_VREPGETSIMSTATERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bioloid_hardware
{
template <class ContainerAllocator>
struct VrepGetSimStateResponse_
{
  typedef VrepGetSimStateResponse_<ContainerAllocator> Type;

  VrepGetSimStateResponse_()
    : state(0)  {
    }
  VrepGetSimStateResponse_(const ContainerAllocator& _alloc)
    : state(0)  {
  (void)_alloc;
    }



   typedef int32_t _state_type;
  _state_type state;



  enum {
    READY_STATE = 0,
    RUNNING_STATE = 1,
  };


  typedef boost::shared_ptr< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct VrepGetSimStateResponse_

typedef ::bioloid_hardware::VrepGetSimStateResponse_<std::allocator<void> > VrepGetSimStateResponse;

typedef boost::shared_ptr< ::bioloid_hardware::VrepGetSimStateResponse > VrepGetSimStateResponsePtr;
typedef boost::shared_ptr< ::bioloid_hardware::VrepGetSimStateResponse const> VrepGetSimStateResponseConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bioloid_hardware

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'bioloid_hardware': ['/home/francisco/robotis_ws/src/ros-bioloid-gp/src/bioloid_hardware/msg'], 'vision_msgs': ['/opt/ros/melodic/share/vision_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/melodic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fb64d65bd27f6cc1679ccef19165348";
  }

  static const char* value(const ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fb64d65bd27f6ccULL;
  static const uint64_t static_value2 = 0x1679ccef19165348ULL;
};

template<class ContainerAllocator>
struct DataType< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bioloid_hardware/VrepGetSimStateResponse";
  }

  static const char* value(const ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 state\n"
"int32 READY_STATE = 0\n"
"int32 RUNNING_STATE = 1\n"
;
  }

  static const char* value(const ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VrepGetSimStateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bioloid_hardware::VrepGetSimStateResponse_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIOLOID_HARDWARE_MESSAGE_VREPGETSIMSTATERESPONSE_H
